{"version":3,"sources":["logo.svg","component/Square.js","component/Board.js","component/calculateWinner.js","component/PlayerForm.js","component/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","hello","hello2","PlayerForm","myChangeHandler","event","nam","target","name","val","setState","state","p1","p2","localStorage","clear","setItem","type","onChange","ReactDOM","render","document","getElementById","Game","history","Array","fill","stepNumber","xIsNext","getItem","alert","slice","concat","step","current","winner","moves","map","move","desc","key","jumpTo","status","handleClick","App","href","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,0ICQ5BC,MAPf,SAAgBC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,QCqDEC,E,uKAnDX,OACE,yBAAKH,UAAU,QACf,2CACE,yBAAKA,UAAU,cACb,kBAACG,EAAD,OAEF,yBAAKH,UAAU,aACb,8BACA,iC,mCAMKI,GAAI,IAAD,OACd,OACE,kBAAC,EAAD,CACEF,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAStC,OACE,6BACE,yBAAKJ,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA7CTC,IAAMC,W,OCgBXC,MAnBf,SAAyBJ,GAWvB,IAVA,IAAMK,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAP,EAAI,EAAGA,EAAIO,EAAMC,OAAQR,IAAK,CAAC,IAAD,cACnBO,EAAMP,GADa,GAC9BS,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIT,EAAQO,IAAMP,EAAQO,KAAOP,EAAQQ,IAAMR,EAAQO,KAAOP,EAAQS,GACpE,OAAOT,EAAQO,GAGnB,OAAO,M,OCfLG,EAAM,qCACNC,EAAO,GACLC,E,kDAEJ,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAORoB,gBAAkB,SAACC,GACjB,IAAIC,EAAMD,EAAME,OAAOC,KACnBC,EAAMJ,EAAME,OAAOpB,MACvB,EAAKuB,SAAL,eAAgBJ,EAAMG,IACtBR,EAAM,OAVN,EAAKU,MAAQ,CACXC,GAAI,GACJC,GAAI,IAJW,E,qDAuBjB,OAPAC,aAAaC,QACbD,aAAaE,QAAQ,OAAO1B,KAAKqB,MAAMC,IACvCE,aAAaE,QAAQ,OAAO1B,KAAKqB,MAAME,IACrB,IAAfvB,KAAKqB,MAAME,KAEZX,EAAO,OAAOZ,KAAKqB,MAAME,GAAG,MAG5B,0BAAM5B,UAAU,YAChB,6BAAK,4BAAQA,UAAU,QAAQgB,EAA1B,IAAkCX,KAAKqB,MAAMC,GAA7C,IAAkDV,GAAvD,qFAKJ,6BACI,6CACA,2BACEe,KAAK,OACLT,KAAK,KACLU,SAAU5B,KAAKc,kBAXjB,eAcA,6CACA,2BACEa,KAAK,OACLT,KAAK,KACLU,SAAU5B,KAAKc,uB,GA5CEX,IAAMC,WAmDhBS,IACfgB,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,S,ICyDxCC,E,kDA1Gb,WAAYvC,GAAQ,IAAD,8BAEjB,cAAMA,IACD2B,MAAQ,CACXa,QAAS,CACP,CACEjC,QAASkC,MAAM,GAAGC,KAAK,QAG3BC,WAAY,EACZC,SAAS,GAVM,E,wDAcPvC,GACV,GAAkC,KAA/ByB,aAAae,QAAQ,SAA8C,KAA/Bf,aAAae,QAAQ,QAE1DC,MAAM,+BAEH,CACL,IAAMN,EAAUlC,KAAKqB,MAAMa,QAAQO,MAAM,EAAGzC,KAAKqB,MAAMgB,WAAa,GAE9DpC,EADUiC,EAAQA,EAAQ3B,OAAS,GACjBN,QAAQwC,QAChC,GAAIpC,EAAgBJ,IAAYA,EAAQF,GACtC,OAEFE,EAAQF,GAAKC,KAAKqB,MAAMiB,QAAU,IAAM,IACxCtC,KAAKoB,SAAS,CACZc,QAASA,EAAQQ,OAAO,CACtB,CACEzC,QAASA,KAGboC,WAAYH,EAAQ3B,OACpB+B,SAAUtC,KAAKqB,MAAMiB,a,6BAOlBK,GACL3C,KAAKoB,SAAS,CACZiB,WAAYM,EACZL,QAAUK,EAAO,IAAO,M,+BAIlB,IAAD,OACDT,EAAUlC,KAAKqB,MAAMa,QACrBU,EAAUV,EAAQlC,KAAKqB,MAAMgB,YAC7BQ,EAASxC,EAAgBuC,EAAQ3C,SACjC6C,EAAQZ,EAAQa,KAAI,SAACJ,EAAMK,GAC/B,IAAMC,EAAOD,EACX,QAAUA,EACV,+BACF,OACE,wBAAIE,IAAKF,GACP,4BAAQpD,QAAS,kBAAM,EAAKuD,OAAOH,KAAQC,OAK7CG,EAAO,iBACX,GAAIP,GAAkB,QAARA,GACZ,GAAY,MAATA,EAGHO,EAAS,aADH5B,aAAae,QAAQ,aAGtB,GAAY,MAATM,EAAc,CAEpBO,EAAS,aADH5B,aAAae,QAAQ,aAKI,IAA9Bf,aAAae,QAAQ,SAA6C,IAA9Bf,aAAae,QAAQ,UAG3Da,EADEpD,KAAKqB,MAAMiB,QACNd,aAAae,QAAQ,QAAQ,UAE5Bf,aAAae,QAAQ,QAAQ,WAQxC,OAJEM,GAAwC,KAA9B7C,KAAKqB,MAAMa,QAAQ3B,SAC9B6C,EAAS,cAIR,yBAAKzD,UAAU,QACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CACEM,QAAS2C,EAAQ3C,QACjBL,QAAS,SAAAG,GAAC,OAAI,EAAKsD,YAAYtD,OAGnC,yBAAKJ,UAAU,aACb,6BAAMyD,GACN,4BAAKN,S,GApGI3C,IAAMC,WCkBVkD,E,uKAbX,OACA,6BAEA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,yBAAK3D,UAAU,UAAf,qCAA0D,uBAAG4D,KAAK,oDAAR,iB,GAV5CnD,aCIEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN/B,IAASC,OACP,kBAAC,IAAM+B,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAASC,eAAe,SDyHpB,kBAAmB8B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c05b9682.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react'\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\nexport default Square\r\n","import React,{Component} from 'react'\r\nimport Square from './Square'\r\n// import Play from './Play'\r\nclass Board extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n      <h1>Tic-Tac-Toe</h1>\r\n        <div className=\"game-board\">\r\n          <Board />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{/* status */}</div>\r\n          <ol>{/* TODO */}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  \r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n        \r\n        \r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Board\r\n","function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\nexport default calculateWinner\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nlet hello=\"Enter Your Names To Start Playing:\";\nlet hello2=\"\";\nclass PlayerForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      p1: '',\n      p2: '',\n    };\n  }\n\n  myChangeHandler = (event) => {\n    var nam = event.target.name;\n    var val = event.target.value;\n    this.setState({[nam]: val});\n    hello=\"Hi \";\n\n    }\n  render() {\n    localStorage.clear();\n    localStorage.setItem(\"val1\",this.state.p1);\n    localStorage.setItem(\"val2\",this.state.p2);\n    if(this.state.p2!='')\n    {\n      hello2=\"and \"+this.state.p2+\" !\";\n    }\n    return (\n      <form className=\"nameform\">\n      <div><strong className=\"high\">{hello} {this.state.p1} {hello2}</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n      \n        </div>\n  <br/>\n      <label>Player X: </label>\n      <input\n        type='text'\n        name='p1'\n        onChange={this.myChangeHandler}\n      />\n      &nbsp;&nbsp;&nbsp;\n      <label>Player O: </label>\n      <input\n        type='text'\n        name='p2'\n        onChange={this.myChangeHandler}\n      />\n      </form>\n    );\n  }\n\n}\nexport default PlayerForm;\nReactDOM.render(<PlayerForm/>, document.getElementById('root'));\n","import React,{Component} from 'react'\r\nimport Square from './Square'\r\nimport Board from './Board'\r\nimport calculateWinner from './calculateWinner'\r\nimport PlayerForm from './PlayerForm'\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    if(localStorage.getItem(\"val1\")===''|| localStorage.getItem(\"val2\")==='')\r\n    {\r\n      alert(\"Name must be filled out\")\r\n    }\r\n    else {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n\r\n    \r\n  }\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'move ' + move :\r\n        'Go to á¹£tart of the game';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n    var flag=0;\r\n    let status=\"X moves first!\";\r\n    if (winner && winner!='Draw') {\r\n      if(winner==='X')\r\n      {\r\n      let x=localStorage.getItem(\"val1\");\r\n      status = \"Winner is \" + x;\r\n      }\r\n      else if(winner==='O') {\r\n        let y=localStorage.getItem(\"val2\");\r\n        status = \"Winner is \" + y;\r\n      }\r\n    }\r\n    else {\r\n      if(localStorage.getItem(\"val1\")!='' && localStorage.getItem(\"val2\")!='')\r\n      {\r\n      if(this.state.xIsNext)\r\n      {status=localStorage.getItem(\"val1\")+\"'s turn\";}\r\n      else {\r\n        status=localStorage.getItem(\"val2\")+\"'s turn\";\r\n      }\r\n    }\r\n  }\r\n  if(!winner && this.state.history.length === 10){\r\n     status = \" Draw!!!!!\";\r\n  }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\nexport default Game\r\n","import React,{ Component } from 'react';\nimport logo from './logo.svg';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n// import Greet from './component/Greet';\n\nimport Game from './component/Game'\nimport PlayerForm from './component/PlayerForm'\nclass App extends Component{\n  render(){\n  \n    return(\n    <div>\n    \n    <PlayerForm/>\n    <hr/>\n    <Game/>\n    <hr/>\n    <div className=\"footer\">ReactJS assignment by Lakshay Dua <a href=\"https://github.com/lakshaydua08/Tic-Tac-Toe-.git\"> GitHub</a></div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}